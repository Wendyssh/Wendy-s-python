D14
基础数据类型
一、数字类型及操作
1、整数类型
（1）和数学中的整数概念一致
pow(x,y)函数，即 x 的y 次方

（2）4种进制表示
十进制、二进制（0b或0B开头）、八进制(0a或0A开头）、十六进制（0O或0o开头）

2、浮点数
和数学中实数的概念一致
带有小数点及小数的数字
浮点数间运算存在不确定尾数，不是 bug，存在于很多种编程语言中。
浮点数间运算及比较使用round(x,d)函数，是指对x的四舍五入，d是小数截取位数
可采用科学技术法表示 <a>e<b>即a乘以10的b次方
浮点数的取值范围和精度基本无限制

3、复数
只有python语言提供了复数类型，和数学中的复数概念一致：a+bj（a是实部，b是虚部。j=-1的平凡根）

二、数值运算操作符
x+y
x-y
x*y
x/y（值为浮点数）
x//y（整数除，x与y之整数商）
+x：x本身
-y：y的负值
x%y（模运算或称为余数）
x**y（作用和 pow(x,y) 一样）
二元操作符有对应的增强赋值操作符
x op =y（op为二元操作符）
x+=y
x-=y
x*=y
x/=y
x//=y
x%=y
x**y
（和上面的加减乘除等运算一样）

x**=3等同于 x=x**3

(增强赋值方法了解即可）
整数是浮点数的特殊形式，浮点数是复数的一种特殊形式（虚部为0）
特别注意浮点数的尾数不确定性

三、字符串类型及操作
字符串
1、从0开始编号
2、两类四种表示方式
（1）"" 或''（单行）
（2）一对三单引号或一对三双引号表示（也是多行注释的一种说法。Python 并未规定多行注释的表示方式。三单引号形成的是字符串，不过它可以作为多行注释的作用。）
（3）如在字符串中包括双引号或单引号，内单外双或内双外单
        既出现单引号也出现双引号，则可使用三引号

3、索引[M]或切片[M:N]
高级用法
[M:N]：M缺失表示至开头，N缺失表示至结尾
[M:N:K] K 是步长
[::-1]相当于将字符串逆序
（M和N都缺失，表示头尾都包括）
特殊字符：转义符\ 反斜杠之后的字符将保留
形成一些组合，表示不可打印的含义
\b：回退
\n 换行（光标移动到下行首）
r回车（光标移动到本行首）没有反斜杠！！！已在python 官方文档证实，在写r的同时\n不起作用了

五、字符串操作符
x+y： 字符串拼接
n*x 或x*n： 将x 复制n次
x in s： x 是否是s的子串


六、字符串处理函数
六个有用的字符串处理函数
len(x):计算字符串x的长度
str(x)：任意类型x所对应的字符串类型
hex(x)或 oct(x):整数x的十六进制或八进制的小写形式的字符串，对系统级程序有用
chr(u):u是unicode，返回其对应的字符
ord(x)：x为字符，返回其对应的 unicode 编码

七：字符串处理方法
1.方法是一个特有名词，指的是<a>.<b>()风格中的函数<b>()
  方法本身也是函数，但与<a>有关，<a>.<b>()风格使用
  字符串或变量也是<a>，存在一些方法
<a>.<b>面向对象编程，a是对象，b是对象a能提供的一些功能即方法
方法必须用.<b>形式提供

8个常用的方法：
str.lower() 或str.upper()：字符串副本，全本字符大写或小写

str.split(sep=None）：返回一个列表，由str根据sep被分割的部分组成
"A,B,C".split(",")结果['A','B','C']

str.count(sub):返回子串sub 在str中出现的次数
"an apple a day".count("a") 结果为4

str.replace(old,new)：返回str副本，所有old子串被替换为new

str.center(width,[,fillchar])：str根据宽度width居中，fillchar可选即填充内容

str.strip(chars)：从str中去掉在其左侧和右侧chars中列出的字符

str.join(iter)：在iter变量除最后元素外每个元素后增加一个str
",".join("12345") 结果:"1,2,3,4,5" 主要用于字符串分割等，可看做字符串格式化输出

八：字符串类型的格式化
.format
槽{}占位信息符

槽内部对格式化的配置方式
{<参数符号>:<格式控制标记>}：共有6个标记
填充、对齐、宽度：给出的变量和字符要求不符合，需要填充
“{0：=^20}”.format("PYTHON")
<左对齐
>右对齐
^居中对齐

上面表示：居中对齐，空余地方填充“=”符号，输出宽度为20 

“{0:*>20}".format("BIT")

可以只给出宽度 {:10}：默认以空格填充，左对齐

数字的千位分隔符 <,>
浮点数小数精度或字符串最大输出长度 <.精度>
整数类型 b,c,d,o,x,X 浮点数类型 e,E,f,% <类型>
{:,.2f}.format(12345.6789)
这些控制符的格式是 {:控制标记},起始位置为0或不写

















