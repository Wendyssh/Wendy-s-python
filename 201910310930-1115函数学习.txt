201910310930
一、变量作用域
1、用于限制变量的作用范围
2、按作用域分类的变量：
   全局 (global):在函数外部定义
   局部 (local):在函数内部定义
3、变量的作用范围
   （1）全局变量：在整个全局范围内都有效（但很容易污染别人）
   全局变量可以在局部变量可以使用（可以理解为中国国家法律适用于各省市）
   （2）局部变量：在局部范围内可以使用（可以理解为针对少数民族的优惠政策等）
   局部变量不可在全局范围使用
   （3）LEGB原则(了解)
   Local
   Enclosing function locale
   Global module
   Buidin

   案例：
a1 = 100
def fun():
    print (a1)
    print("I am in fun")
    a2=99
    print(a2)
print(a1)
#函数在内部定义即是局部变量，无法在外部使用即无法使用全局变量。
fun()
print(a2)

二、提升局部变量为全局变量
1、使用global
2、案例：ex_29_002.py

def fun():
	b1=100
    print (b1)
    print("I am in fun")
    b2=99
    print(b2)
#b1是在函数内部定义的，而最后是在函数外部使用，因此会出现Nameerror 错误。
print(b1)
#print(b2)
fun()

如果要提升为全局变量：
在 b1 前加 global会提升 syntax error 错误。因为不能直接在global b1 变量后面赋值。
运行之后提示 indentation error，老师juyper是 b1 nameerror问题未解决。把 print(b1)放在函数之后问题解决。但在sublime3 中仍未解决。

三、globals,locals函数
1、通过这两个函数显示出局部变量和全局变量
案例(不理解)
#globals和locals
#这两个函数叫内置函数
a=1
b=2

def fun(c,d):
    e=111
    print("Locals ={0}".format(locals()))
    print("Globals={0}".format(globals()))
fun(100,200)

四、eval()函数
1、是内置函数
2、作用是把字符串当做一个表达式（代码）执行，返回表达式或执行后的结果
3、语法

eval(string_code, globals=None, locals=None)

4、案例 ex_29_004.py
x = 100
y = 200
#执行 x+y
#本可以直接写 z = x+y
z1 = x+y
z2 = eval("x+y")

print(z1)
print(z2)


五、exec()函数
1、跟 eval 功能类似，即把字符串当代码执行，但不返回结果
疑问：这种函数什么时候使用？百度查阅。
2、语法：

exec (string_code, globals=None, locals=None)

案例1：ex_29_005.py

x = 100
y = 200
#执行 x+y
#本可以直接写 z = x+y
z1 = x+y
z2 = exec("x+y")
#打印结果为 300 None
print(z1)
print(z2)

案例2：ex_29_005a.py
x = 100
y = 200

z1 = x+y
#1. 注意字符串中引号的写法
#2.比对 exec执行结果和代码执行结果
z2 = exec("print('x+y: ', x+y)")
#打印结果为 300 None
print(z1)
print(z2)

六、递归函数
1、函数直接或间接调用自身
2、优点：间接、理解容易
3、缺点：对递归深度有限制，消耗资源大
4、python 对递归深度有限制，超过限制报错
5、案例 ex_29_006.py(不理解)
报错：indentationerror

# 递归调用深度限制代码
x = 0

def fun():
	global x
	x += 1
    print(x)
    #函数自己调用给自己
    fun ()
#调用函数
fun()

62:00暂停







